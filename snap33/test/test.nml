(* test.nml *)

(* higher order *)
fun inc x = x + 1
fun twice f = fun x -> f (f x)


(* polymorphism *)
fun id x = x
fun const x _ = x
fun apply f x = f x

(* algebraic types *)
(* TODO
type mytype = Is of bool | Nope
*)

(* polymorphic types *)
(* TODO
type 'a opt = Some of 'a | Nothing
*)

(* pattern matching *)
fun fst tuple = match tuple with (a, _) -> a
fun snd tuple = match tuple with (_, b) -> b

match 10 with
	0 -> ()
	| 1 -> ()
	| 2 -> ()
	| o -> ()
	| _ -> ()

(* let pattern matching *)
(* TODO
fun fst (a, _) = a
fun snd (_, b) = b
*)
