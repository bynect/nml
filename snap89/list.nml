(* An implementation of lists *)

data List a = Cons : a * List a | Nil

fun head xs : List a -> a =
  match xs with
  | Cons (x, _) -> x
  | Nil -> panic "List.head with Nil"

fun tail xs : List a -> List a =
  match xs with
  | Cons (_, xs) -> xs
  | Nil -> panic "List.tail with Nil"

fun length xs : List a -> Int  =
  fun length' acc xs =
    match xs with
    | Cons (_, xs) -> length' (acc + 1) xs
    | Nil -> acc
  in
  length' xs 0

fun map f xs : (a -> b) -> List a -> List b =
  match xs with
  | Cons (x, xs) -> Cons (f x, map f xs)
  | Nil -> Nil

fun foldr f acc xs : (a -> b -> b) -> b -> List a -> b =
  match xs with
  | Cons (x, xs) -> f x (foldr f acc xs)
  | Nil -> acc

fun foldl f acc xs : (a -> b -> a) -> a -> List b -> a =
  match xs with
  | Cons (x, xs) -> foldl f (f acc x) xs
  | Nil -> acc

let reverse : List a -> List a = foldl (\a b -> b :: a) []

fun append xs ys =
  match xs with
  | Cons (x, xs) -> Cons (x, append xs ys)
  | Nil -> ys

fun zip xs ys : List a -> List b -> List (a * b) =
  match xs, ys with
  | Cons (x, xs), Cons (y, ys) -> Cons ((x, y), zip xs ys)
  | _, _ -> Nil

fun unzip xs : List (a * b) -> List a * List b =
  fun unzip' xs' x' =
    let xs = match xs' with (x, _) -> x in
    let ys = match xs' with (_, y) -> y in
    let x = match x' with (x, _) -> x in
    let y = match x' with (_, y) -> y in
    Cons (x, xs), Cons (y, ys)
  in
  foldl unzip' (Nil, Nil) (reverse xs)
