(* An implementation of lists *)

data List a = Cons : a * List a | Nil

fun head xs : List a -> a =
  match xs with
  | Nil -> panic "List.head with Nil"
  | Cons (x, _) -> x

fun tail xs : List a -> List a =
  match xs with
  | Nil -> panic "List.tail with Nil"
  | Cons (_, xs) -> xs

fun length xs : List a -> Int  =
  fun length' acc xs =
    match xs with
    | Nil -> acc
    | Cons (_, xs) -> length' (acc + 1) xs
  in
  length' xs 0

fun map f xs : (a -> b) -> List a -> List b =
  match xs with
  | Nil -> Nil
  | Cons (x, xs) -> Cons (f x, map f xs)

fun zip xs ys : List a -> List b -> List (a * b) =
  match xs, ys with
  | Cons (x, xs), Cons (y, ys) -> Cons ((x, y), zip xs ys)
  | _, _ -> Nil

fun foldr f acc xs : (a -> b -> b) -> b -> List a -> b =
  match xs with
  | Nil -> acc
  | Cons (x, xs) -> f x (foldr f acc xs)

fun foldl f acc xs : (a -> b -> a) -> a -> List b -> a =
  match xs with
  | Nil -> acc
  | Cons (x, xs) -> foldl f (f acc x) xs

let reverse : List a -> List a = foldl (\a b -> b :: a) []

fun append xs ys =
  match xs with
  | Nil -> ys
  | Cons (x, xs) -> Cons (x, append xs ys)
